---
name: 'Docs image build'
on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - 'main'
    paths:
      - 'docs/Containerfile'
      - '.github/workflows/docs_image.yml'

  workflow_call: {}
  workflow_dispatch: {}

permissions:
  contents: 'read'

concurrency:
  group: 'ci-${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: false

jobs:
  check-user-permissions:
    runs-on: 'ubuntu-22.04'
    permissions:
      contents: 'read'
    outputs:
      require-result: '${{ steps.check-access.outputs.require-result }}'
    steps:
      - name: 'Harden Runner'
        uses: 'step-security/harden-runner@5c7944e73c4c2a096b17a9cb74d65b6c2bbafbde' # v2.9.1
        with:
          egress-policy: 'block'
          allowed-endpoints: >
            api.github.com:443
            github.com:443

      - name: 'Get User Permissions'
        id: 'check-access'
        uses: 'actions-cool/check-user-permission@956b2e73cdfe3bcb819bb7225e490cb3b18fd76e' # v2.2.1
        with:
          require: 'write'
          username: '${{ github.triggering_actor }}'
        env:
          GITHUB_TOKEN: '${{ secrets.token }}'

      - name: 'Check User Permission'
        if: "steps.check-access.outputs.require-result == 'false'"
        run: |
          echo "${{ github.triggering_actor }} does not have permissions on this repo."
          echo "Current permission level is ${{ steps.check-access.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"

  build-docs-image:
    name: 'Build docs image'
    if: "needs.check-user-permissions.outputs.require-result == 'true'"
    needs: 'check-user-permissions'
    runs-on: 'ubuntu-22.04'
    permissions:
      packages: 'write'
      attestations: 'write'
      id-token: 'write'
    steps:
      - name: 'Harden Runner'
        uses: 'step-security/harden-runner@5c7944e73c4c2a096b17a9cb74d65b6c2bbafbde' # v2.9.1
        with:
          disable-sudo: true
          egress-policy: 'block'
          allowed-endpoints: >
            api.github.com:443
            auth.docker.io:443
            dl-cdn.alpinelinux.org:443
            fulcio.sigstore.dev:443
            ghcr.io:443
            github.com:443
            index.rubygems.org:443
            pkg-containers.githubusercontent.com:443
            production.cloudflare.docker.com:443
            registry-1.docker.io:443
            rekor.sigstore.dev:443
            rubygems.org:443

      - name: 'Checkout the repository'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # v4.1.7
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: 'Extract repository metadata'
        id: 'metadata'
        uses: 'docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81' # v5.5.1
        with:
          context: 'git'
          flavor: |
            latest=true

          images: |
            name=ghcr.io/${{ github.repository_owner }}/jekyll-build,enable=true

          tags: |
            type=sha,format=long,enable=true

          labels: |
            org.opencontainers.image.description=Build documentation using Jekyl
            org.opencontainers.image.title=jekyll-build

          annotations: |
            org.opencontainers.image.description=Build documentation using Jekyl
            org.opencontainers.image.title=jekyll-build

      - name: 'Login to ghcr.io'
        uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # v3.3.0
        with:
          registry: 'ghcr.io/${{ github.repository_owner }}'
          username: '${{ github.repository_owner }}'
          password: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'Set Up Docker Buildx'
        uses: 'docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db' # v3.6.1

      - name: 'Test build of the image'
        uses: 'docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85' # v6.7.0
        with:
          annotations: '${{ steps.metadata.outputs.annotations }}'
          cache-from: 'type=registry,ref=ghcr.io/${{ github.repository_owner }}/jekyll-build:buildcache'
          context: './docs'
          file: './docs/Containerfile'
          labels: '${{ steps.metadata.outputs.labels }}'
          load: true
          push: false
          tags: '${{ github.repository_owner }}/jekyll-build:test'

      - name: 'Scan container image with Trivy'
        uses: 'aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8' # 0.24.0
        with:
          image-ref: '${{ github.repository_owner }}/jekyll-build:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          trivy-config: 'trivy.yaml'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: 'Upload artifact'
        uses: 'actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a' # v4.3.6
        with:
          name: 'Trivy docs container SARIF file'
          path: 'trivy-results.sarif'
          retention-days: 5

      - name: 'Upload to code-scanning'
        uses: 'github/codeql-action/upload-sarif@429e1977040da7a23b6822b13c129cd1ba93dbb2' # v3.26.2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 'Build and push image'
        uses: 'docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85' # v6.7.0
        id: 'build-push'
        with:
          annotations: '${{ steps.metadata.outputs.annotations }}'
          cache-from: 'type=registry,ref=ghcr.io/${{ github.repository_owner }}/jekyll-build:buildcache'
          cache-to: 'type=registry,ref=ghcr.io/${{ github.repository_owner }}/jekyll-build:buildcache,mode=max'
          context: './docs'
          file: './docs/Containerfile'
          labels: '${{ steps.metadata.outputs.labels }}'
          push: true
          sbom: true
          tags: '${{ steps.metadata.outputs.tags }}'

      - name: 'Generate artifact attestation'
        uses: 'actions/attest-build-provenance@310b0a4a3b0b78ef57ecda988ee04b132db73ef8' # v1.4.1
        with:
          subject-name: 'ghcr.io/${{ github.repository_owner }}/jekyll-build'
          subject-digest: '${{ steps.build-push.outputs.digest }}'
          push-to-registry: true
...
