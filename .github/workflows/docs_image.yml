---
name: 'Docs image build'
on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - 'main'
    paths:
      - 'docs/Containerfile'
      - 'docs/Gemfile'
      - 'docs/Gemfile.lock'
      - '.github/workflows/docs_image.yml'

  pull_request:
    branches:
      - 'main'
    paths:
      - 'docs/Containerfile'
      - 'docs/Gemfile'
      - 'docs/Gemfile.lock'
      - '.github/workflows/docs_image.yml'

  workflow_call: {}
  workflow_dispatch: {}

permissions:
  contents: 'read'

concurrency:
  group: 'ci-${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: false

env:
  # gitleaks image to use to check files prior to uploading them to prevent sensitive data being leaked
  # yamllint disable rule:line-length
  # renovate image dep:
  gitleaks-image: 'ghcr.io/gitleaks/gitleaks:v8.28.0@sha256:cdbb7c955abce02001a9f6c9f602fb195b7fadc1e812065883f695d1eeaba854'
  # yamllint enable rule:line-length

jobs:
  check-user-permissions:
    runs-on: 'ubuntu-24.04'
    permissions:
      contents: 'read'
    outputs:
      require-result: '${{ steps.check-access.outputs.require-result }}'
    steps:
      - name: 'Harden Runner'
        uses: 'step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911' # v2.13.0
        with:
          egress-policy: 'block'
          allowed-endpoints: >
            api.github.com:443
            github.com:443

      - name: 'Get User Permissions'
        id: 'check-access'
        uses: 'actions-cool/check-user-permission@7b90a27f92f3961b368376107661682c441f6103' # v2.3.0
        with:
          require: 'write'
          username: '${{ github.triggering_actor }}'
        env:
          GITHUB_TOKEN: '${{ secrets.token }}'

      - name: 'Check User Permission'
        if: "steps.check-access.outputs.require-result == 'false'"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };
          echo "${{ github.triggering_actor }} does not have permissions on this repo."
          echo "Current permission level is ${{ steps.check-access.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"

  prepare-vars:
    name: 'Prepare variables for building the container image'
    if: "needs.check-user-permissions.outputs.require-result == 'true'"
    needs: 'check-user-permissions'
    runs-on: 'ubuntu-24.04'
    container:
      # yamllint disable-line rule:line-length
      image: 'registry.access.redhat.com/ubi9/podman:9.6-1754274769@sha256:5a664970d99454c8dbd2431c6fb6dab544dfff068fd02a9e146bd4f097c261f4'
      options: '--privileged'
    outputs:
      repository-name: '${{ steps.prepare-vars.outputs.repository-name }}'
      image-name: '${{ steps.prepare-vars.outputs.image-name }}'
      next-version: '${{ steps.prepare-vars.outputs.next-version }}'
      current-version: '${{ steps.prepare-vars.outputs.current-version }}'
    steps:
      - name: 'Prepare variables for building the image'
        id: 'prepare-vars'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          declare -r repositoryName="$(echo "${{ github.repository }}" | awk -F '/' '{print $2}')"
          echo "Info: Defined repository name: ${repositoryName}"
          echo "repository-name=${repositoryName}" >> "${GITHUB_OUTPUT}"

          declare -r imageName="ghcr.io/${{ github.repository_owner }}/${repositoryName}-jekyll"
          echo "Info: Defined image name: ${imageName}"
          echo "image-name=${imageName}" >> "${GITHUB_OUTPUT}"

          #
          # prepare a CalVer release version
          #

          # current month with a removed prefixed zero (e.g. 1, 4, 10 etc)
          declare -r month="$(date +'%m' | sed 's/^0//')"

          # current two digit year (eg. 24)
          declare -r year="$(date +'%y')"

          # current base version with a prefixed v (e.g. v24.8, v23,12, etc)
          declare -r baseVersion="v${year}.${month}"

          # regular expression for tags to filter/ignore
          declare -r ignoreTags="^(latest|buildcache)$|^sha([[:digit:]]+?)?-"

          # podman arguments to search for tags
          declare -ra podmanArguments=(
            "search"
            "--list-tags"
            "--no-trunc"
            "--limit"
            "999999"
            "--format"
            "{{.Tag}}"
            "${imageName}"
          )

          # check whether there has been a release this month
          #
          declare highestVersion=""
          if podman "${podmanArguments[@]}" | grep -vE "${ignoreTags}" | grep -q "${baseVersion}"; then

            # sort the versions with the highest showing first and select it
            highestVersion="$(podman "${podmanArguments[@]}" | sort -Vr | head -n1)"
            [[ "${highestVersion}" =~ ^v([[:digit:]]+)\.([[:digit:]]+)\.([[:digit:]]+)$ ]] || {
              echo "ERROR: Unable to detect highest version from string '${highestVersion}'";
              exit 1;
            };

            # extract current patch version and increment it by one (e.g. 24.8.1 -> 24.8.2, etc.)
            patchVersion="${BASH_REMATCH[3]}"
            nextPatchVersion="$((patchVersion+1))"
            nextVersion="${baseVersion}.${nextPatchVersion}"
          else
            # no version found for this month, creating the first (e.g. v24.8.0)
            nextVersion="${baseVersion}.0"
          fi

          echo "INFO: Current version of image: ${highestVersion}"
          echo "current-version=${highestVersion}" >> "${GITHUB_OUTPUT}"

          echo "INFO: Next version for image: ${nextVersion}"
          echo "next-version=${nextVersion}" >> "${GITHUB_OUTPUT}"

  build-docs-image:
    name: 'Build docs image'
    if: "needs.check-user-permissions.outputs.require-result == 'true'"
    needs:
      - 'check-user-permissions'
      - 'prepare-vars'
    runs-on: 'ubuntu-24.04'
    permissions:
      attestations: 'write'
      id-token: 'write'
      packages: 'write'
      security-events: 'write'
    steps:
      - name: 'Harden Runner'
        uses: 'step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911' # v2.13.0
        with:
          egress-policy: 'block'
          allowed-endpoints: >
            *.cloudfront.net
            api.github.com:443
            auth.docker.io:443
            dl-cdn.alpinelinux.org:443
            fulcio.sigstore.dev:443
            ghcr.io:443
            github.com:443
            index.rubygems.org:443
            objects.githubusercontent.com:443
            pkg-containers.githubusercontent.com:443
            release-assets.githubusercontent.com:443
            production.cloudflare.docker.com:443
            public.ecr.aws:443
            registry-1.docker.io:443
            rekor.sigstore.dev:443
            rubygems.org:443

      - name: 'Checkout the repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: 'Extract repository metadata'
        id: 'metadata'
        uses: 'docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f' # v5.8.0
        with:
          context: 'git'
          flavor: |
            latest=true

          images: |
            name=${{ needs.prepare-vars.outputs.image-name }},enable=true

          tags: |
            type=sha,format=long,enable=true
            type=raw,${{ needs.prepare-vars.outputs.next-version }}

          labels: |
            org.opencontainers.image.description=Build documentation using Jekyl
            org.opencontainers.image.title=jekyll-build

          annotations: |
            org.opencontainers.image.description=Build documentation using Jekyl
            org.opencontainers.image.title=jekyll-build

      - name: 'Login to ghcr.io'
        uses: 'docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1' # v3.5.0
        with:
          registry: 'ghcr.io/${{ github.repository_owner }}'
          username: '${{ github.repository_owner }}'
          password: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'Set Up Docker Buildx'
        uses: 'docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435' # v3.11.1

      - name: 'Test build of the image'
        uses: 'docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83' # v6.18.0
        with:
          annotations: '${{ steps.metadata.outputs.annotations }}'
          cache-from: 'type=registry,ref=${{ needs.prepare-vars.outputs.image-name }}:buildcache'
          context: './docs'
          file: './docs/Containerfile'
          labels: '${{ steps.metadata.outputs.labels }}'
          load: true
          push: false
          tags: '${{ needs.prepare-vars.outputs.image-name }}:test'

      - name: 'Scan ${{ needs.prepare-vars.outputs.image-name }}:test with Trivy'
        uses: 'aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4' # 0.32.0
        env:
          TRIVY_DB_REPOSITORY: 'public.ecr.aws/aquasecurity/trivy-db'
          TRIVY_JAVA_DB_REPOSITORY: 'public.ecr.aws/aquasecurity/trivy-java-db'
          TRIVY_CHECKS_BUNDLE_REPOSITORY: 'public.ecr.aws/aquasecurity/trivy-checks'
        with:
          format: 'sarif'
          image-ref: '${{ needs.prepare-vars.outputs.image-name }}:test'
          output: 'trivy-results-test-${{ needs.prepare-vars.outputs.next-version }}.sarif'
          trivy-config: 'trivy.yaml'
          scan-type: 'image'

      - name: >-
          Scan trivy-results-test-${{ needs.prepare-vars.outputs.next-version }}.sarif to ensure it contains no secrets
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          docker run -v "./trivy-results-test-${{ needs.prepare-vars.outputs.next-version }}.sarif:/scan" \
            "${{ env.gitleaks-image }}" detect --source "/scan" --no-git || {
              echo "ERROR: Secret found, failing workflow";
              exit 1;
          };

      - name: 'Upload artifact'
        uses: 'actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02' # v4.6.2
        with:
          name: >-
            Trivy scan test build of ${{ needs.prepare-vars.outputs.repository-name }}-jekyll
            ${{ needs.prepare-vars.outputs.next-version }}
          path: 'trivy-results-test-${{ needs.prepare-vars.outputs.next-version }}.sarif'
          retention-days: 5

      - name: 'Upload to code-scanning'
        uses: 'github/codeql-action/upload-sarif@51f77329afa6477de8c49fc9c7046c15b9a4e79d' # v3.29.5
        with:
          sarif_file: 'trivy-results-test-${{ needs.prepare-vars.outputs.next-version }}.sarif'
          category: 'Trivy-scan-test-image'

      - name: 'Build and push image'
        if: "${{ github.event_name != 'pull_request' }}"
        uses: 'docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83' # v6.18.0
        id: 'build-push'
        with:
          annotations: '${{ steps.metadata.outputs.annotations }}'
          cache-from: 'type=registry,ref=${{ needs.prepare-vars.outputs.image-name }}:buildcache'
          cache-to: 'type=registry,ref=${{ needs.prepare-vars.outputs.image-name }}:buildcache,mode=max'
          context: './docs'
          file: './docs/Containerfile'
          labels: '${{ steps.metadata.outputs.labels }}'
          push: true
          sbom: true
          tags: '${{ steps.metadata.outputs.tags }}'

      - name: 'Generate artifact attestation'
        if: "${{ github.event_name != 'pull_request' }}"
        uses: 'actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be' # v2.4.0
        with:
          subject-name: '${{ needs.prepare-vars.outputs.image-name }}'
          subject-digest: '${{ steps.build-push.outputs.digest }}'
          push-to-registry: true

      - name: >-
          Scan ${{ needs.prepare-vars.outputs.image-name }}:${{ needs.prepare-vars.outputs.next-version }} with Trivy
        if: "${{ github.event_name != 'pull_request' }}"
        uses: 'aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4' # 0.32.0
        env:
          TRIVY_DB_REPOSITORY: 'public.ecr.aws/aquasecurity/trivy-db'
          TRIVY_JAVA_DB_REPOSITORY: 'public.ecr.aws/aquasecurity/trivy-java-db'
          TRIVY_CHECKS_BUNDLE_REPOSITORY: 'public.ecr.aws/aquasecurity/trivy-checks'
        with:
          format: 'sarif'
          image-ref: '${{ needs.prepare-vars.outputs.image-name }}:${{ needs.prepare-vars.outputs.next-version }}'
          output: 'trivy-results-${{ needs.prepare-vars.outputs.next-version }}.sarif'
          trivy-config: 'trivy.yaml'
          scan-type: 'image'

      - name: >-
          Scan trivy-results-test-${{ needs.prepare-vars.outputs.next-version }}.sarif to ensure it contains no secrets
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          docker run -v "./trivy-results-test-${{ needs.prepare-vars.outputs.next-version }}.sarif:/scan" \
            "${{ env.gitleaks-image }}" detect --source "/scan" --no-git || {
              echo "ERROR: Secret found, failing workflow";
              exit 1;
          };

      - name: 'Upload artifact'
        if: "${{ github.event_name != 'pull_request' }}"
        uses: 'actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02' # v4.6.2
        with:
          name: 'Trivy scan of ${{ needs.prepare-vars.outputs.next-version }}'
          path: 'trivy-results-${{ needs.prepare-vars.outputs.next-version }}.sarif'
          retention-days: 5

      - name: 'Upload to code-scanning'
        if: "${{ github.event_name != 'pull_request' }}"
        uses: 'github/codeql-action/upload-sarif@51f77329afa6477de8c49fc9c7046c15b9a4e79d' # v3.29.5
        with:
          sarif_file: 'trivy-results-${{ needs.prepare-vars.outputs.next-version }}.sarif'
          category: 'Trivy-scan-final-image'
...
