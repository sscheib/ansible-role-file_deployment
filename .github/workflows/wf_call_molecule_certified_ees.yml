---
name: 'include: molecule certified EEs'
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      repoCache:
        required: true
        type: 'string'

      moleculeDebug:
        required: true
        type: 'string'

      ansibleVerbosity:
        required: true
        type: 'string'

    secrets:
      token:
        required: true
      CRC_USERNAME:
        required: true
      CRC_PASSWORD:
        required: true

permissions:
  contents: 'read'

# Adding these as env variables makes it easy to re-use them in different steps and in bash.
env:
  cache_archive: 'molecule_cache.tar.gz'
  # This is the dir renovate provides
  # If we set our own directory via cacheDir, we can run into permissions issues.
  # It is also possible to cache a higher level of the directory, but it has minimal benefit. While renovate execution
  # time gets faster, it also takes longer to upload the cache as it grows bigger.
  cache_dir: '/tmp/.cache/molecule'
  # This can be manually changed to bust the cache if neccessary.
  cache_key: 'molecule-cache'

  # gitleaks image to use to check files prior to uploading them to prevent sensitive data being leaked
  # yamllint disable rule:line-length
  # renovate image dep:
  gitleaks-image: 'ghcr.io/gitleaks/gitleaks:v8.21.2@sha256:0e99e8821643ea5b235718642b93bb32486af9c8162c8b8731f7cbdc951a7f46'
  # yamllint enable rule:line-length

jobs:
  check-user-permissions:
    runs-on: 'ubuntu-24.04'
    permissions:
      contents: 'read'
    outputs:
      require-result: '${{ steps.check-access.outputs.require-result }}'
    steps:
      - name: 'Harden Runner'
        uses: 'step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7' # v2.10.1
        with:
          egress-policy: 'block'
          allowed-endpoints: >
            api.github.com:443
            github.com:443

      - name: 'Get User Permissions'
        id: 'check-access'
        uses: 'actions-cool/check-user-permission@956b2e73cdfe3bcb819bb7225e490cb3b18fd76e' # v2.2.1
        with:
          require: 'write'
          username: '${{ github.triggering_actor }}'
        env:
          GITHUB_TOKEN: '${{ secrets.token }}'

      - name: 'Check User Permission'
        if: "steps.check-access.outputs.require-result == 'false'"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          echo "${{ github.triggering_actor }} does not have permissions on this repo."
          echo "Current permission level is ${{ steps.check-access.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"

  molecule-certified-ees:
    runs-on: 'ubuntu-24.04'
    needs: 'check-user-permissions'
    if: "needs.check-user-permissions.outputs.require-result == 'true'"
    permissions:
      contents: 'write'
    container:
      image: '${{ matrix.container.image }}'
      credentials:
        username: '${{ secrets.crc_username }}'
        password: '${{ secrets.crc_password }}'
      options: '--privileged --platform amd64'
    strategy:
      matrix:
        container:
          #
          # UBI 8
          #

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.17.5-4@sha256:6706992c89f6e2a2744f5aab7496e46123ad9a92014a8e01225fb7b0c696c343'
            cache_key_suffix: 'rhel8-2.17'
            # renovate yaml: datasource=pypi
            molecule: '24.9.0'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16.12-4@sha256:013afba23af4ea79fb4b5515a2723eaab81bd0b28e8f21cde269663cd04450f6'
            cache_key_suffix: 'rhel8-2.16'
            # renovate yaml: datasource=pypi
            molecule: '24.9.0'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.15.12-7@sha256:a0aa6434b3476220aea70302d8ad24424c0a001d80ce02ca4ef018eda2e99947'
            cache_key_suffix: 'rhel8-2.15'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.14.13-16@sha256:45e3d1cee17f3915b174a319eb5191a020b9ff33ddf2a40345076d00febefda7'
            cache_key_suffix: 'rhel8-2.14'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.13.10-29@sha256:fc122a913254bd734d2691cb74a0e6b6083f6d2caf32d70e61ffb1c9b4c0280d'
            cache_key_suffix: 'rhel8-2.13'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'

          #
          # UBI 9
          #

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.17.5-3@sha256:1ef76e8dac4c1e90fc49f610d9a67dbe77f54609cc6e157a49d40622b1cde22a'
            cache_key_suffix: 'rhel9-2.17'
            # renovate yaml: datasource=pypi
            molecule: '24.9.0'
            additional_packages:
              - 'python-unversioned-command'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.16.12-3@sha256:2bb781a7bda57c8c5e60fc42049f33ca8eb6016d42b6cc0a8dfb9e3f47163364'
            cache_key_suffix: 'rhel9-2.16'
            # renovate yaml: datasource=pypi
            molecule: '24.9.0'
            additional_packages:
              - 'python-unversioned-command'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.15.12-8@sha256:9407b20e04232a6929c1e1e97639667848800fc5f7568f9e4213c6d3db3ee6b7'
            cache_key_suffix: 'rhel9-2.15'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'
            additional_packages:
              - 'python-unversioned-command'

    steps:
      - name: 'Install NodeJS'
        uses: 'actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af' # v4.1.0
        with:
          # renovate dep: datasource=npm depName=node
          node-version: '20.18.0'

      - name: 'Install podman'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          microdnf install podman -y

      - name: 'Checkout repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2
        with:
          # check out the pull request's HEAD
          ref: '${{ github.event.pull_request.head.sha }}'

      - name: 'Download cache of the previous workflow run'
        uses: 'dawidd6/action-download-artifact@bf251b5aa9c2f7eeb574a96ee720e24f801b7c11' # v6
        if: >-
          github.event.inputs.repoCache != 'disabled' &&
          github.event.inputs.repoCache != 'reset'
        id: 'artifact-download'
        with:
          name: '${{ env.cache_key }}-${{ matrix.container.cache_key_suffix }}'
          path: 'cache-download'
          if_no_artifact_found: 'ignore'

      - name: 'Extract molecule cache to improve performance'
        if: >-
          github.event.inputs.repoCache != 'disabled' &&
          github.event.inputs.repoCache != 'reset' &&
          steps.artifact-download.outputs.found_artifact == 'true'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          # Make sure the directory exists, and extract it there. Note that it's nested in the download directory.
          mkdir -p "${{ env.cache_dir }}"
          tar -xzf "cache-download/${{ env.cache_archive }}" -C "${{ env.cache_dir }}"

      - name: 'Install additional packages'
        if: "join(matrix.container.additional_packages, ' ') != ''"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          microdnf install -y ${{ join(matrix.container.additional_packages, ' ') }}

      - name: 'Install Python packages'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          pip3 install molecule==${{ matrix.container.molecule }}
          mkdir -pv "${{ env.cache_dir }}"

      - name: 'Run molecule'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          # check if any debug options are enabled
          (
            [[ "${{ github.event.inputs.moleculeDebug }}" == "" ]] ||
            [[ "${{ github.event.inputs.moleculeDebug }}" != "true" ]]
          ) || {
            export MOLECULE_DEBUG=1;
          };

          (
            [[ "${{ github.event.inputs.ansibleVerbosity }}" == "" ]] ||
            [[ "${{ github.event.inputs.ansibleVerbosity }}" -eq 0 ]]
          ) || {
            export ANSIBLE_VERBOSITY="${{ github.event.inputs.ansibleVerbosity }}";
          };
          molecule test

      - name: 'Scan molecule cache directory to ensure it contains no secrets prior to uploading'
        if: "github.event.inputs.repoCache != 'disabled'"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          podman run -v "${{ env.cache_dir }}:/scan" "${{ env.gitleaks-image }}" detect --source "/scan" --no-git || {
            echo "ERROR: Secret found, failing workflow";
            exit 1;
          };

      - name: 'Compress molecule cache to improve performance'
        if: "github.event.inputs.repoCache != 'disabled'"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          # The -C is important, as otherwise we end up extracting the files with
          # their full path, ultimately leading to a nested directory situation.
          tar -czf "${{ env.cache_archive }}" -C "${{ env.cache_dir }}" .

      - name: 'Upload compressed cache'
        uses: 'actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882' # v4.4.3
        if: "github.event.inputs.repoCache != 'disabled'"
        with:
          name: '${{ env.cache_key }}-${{ matrix.container.cache_key_suffix }}'
          path: '${{ env.cache_archive }}'
          # Since this is updated and restored on every run, we don't need to keep it
          # for long. Just make sure this value is large enough that multiple molecule
          # runs can happen before older cache archives are deleted.
          retention-days: 3
...
