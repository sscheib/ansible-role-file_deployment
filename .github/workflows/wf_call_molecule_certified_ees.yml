---
name: 'include: molecule certified EEs'
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      repoCache:
        required: true
        type: 'string'

      moleculeDebug:
        required: true
        type: 'string'

      ansibleVerbosity:
        required: true
        type: 'string'

    secrets:
      token:
        required: true
      CRC_USERNAME:
        required: true
      CRC_PASSWORD:
        required: true

permissions:
  contents: 'read'

# Adding these as env variables makes it easy to re-use them in different steps and in bash.
env:
  cache_archive: 'molecule_cache.tar.gz'
  # This is the dir renovate provides
  # If we set our own directory via cacheDir, we can run into permissions issues.
  # It is also possible to cache a higher level of the directory, but it has minimal benefit. While renovate execution
  # time gets faster, it also takes longer to upload the cache as it grows bigger.
  cache_dir: '/tmp/.cache/molecule'
  # This can be manually changed to bust the cache if neccessary.
  cache_key: 'molecule-cache'

  # gitleaks image to use to check files prior to uploading them to prevent sensitive data being leaked
  # yamllint disable rule:line-length
  # renovate image dep:
  gitleaks-image: 'ghcr.io/gitleaks/gitleaks:v8.28.0@sha256:cdbb7c955abce02001a9f6c9f602fb195b7fadc1e812065883f695d1eeaba854'
  # yamllint enable rule:line-length

jobs:
  check-user-permissions:
    runs-on: 'ubuntu-24.04'
    permissions:
      contents: 'read'
    outputs:
      require-result: '${{ steps.check-access.outputs.require-result }}'
    steps:
      - name: 'Harden Runner'
        uses: 'step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a' # v2.13.1
        with:
          egress-policy: 'block'
          allowed-endpoints: >
            api.github.com:443
            github.com:443

      - name: 'Get User Permissions'
        id: 'check-access'
        uses: 'actions-cool/check-user-permission@7b90a27f92f3961b368376107661682c441f6103' # v2.3.0
        with:
          require: 'write'
          username: '${{ github.triggering_actor }}'
        env:
          GITHUB_TOKEN: '${{ secrets.token }}'

      - name: 'Check User Permission'
        if: "steps.check-access.outputs.require-result == 'false'"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          echo "${{ github.triggering_actor }} does not have permissions on this repo."
          echo "Current permission level is ${{ steps.check-access.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"

  molecule-certified-ees:
    runs-on: 'ubuntu-24.04'
    needs: 'check-user-permissions'
    if: "needs.check-user-permissions.outputs.require-result == 'true'"
    permissions:
      contents: 'write'
    container:
      image: '${{ matrix.container.image }}'
      credentials:
        username: '${{ secrets.crc_username }}'
        password: '${{ secrets.crc_password }}'
      options: '--privileged --platform amd64'
    strategy:
      matrix:
        container:
          #
          # UBI 8
          #

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.18.9-3@sha256:699208b5703fc8f97e376dc7ea854e7df9e3402c92ae299592772bc5e307fdc7'
            cache_key_suffix: 'rhel8-2.18'
            # renovate yaml: datasource=pypi
            molecule: '25.9.0'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.17.14-3@sha256:6df2857975d6e343d7f2dadf7e3a4b5acb210dc6cba28f36a179c17a687cd6ed'
            cache_key_suffix: 'rhel8-2.17'
            # renovate yaml: datasource=pypi
            molecule: '25.9.0'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16.14-26@sha256:b860edf92b104eb7738bc8940a08311c354d2ff73e8c0661f9579ae0eedc943e'
            cache_key_suffix: 'rhel8-2.16'
            # renovate yaml: datasource=pypi
            molecule: '25.9.0'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.15.13-28@sha256:b9cc84c0002db1e5c53a46dd2cf6fc610f1c9b2010a495f66eead9a679ebbe52'
            cache_key_suffix: 'rhel8-2.15'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.14.13-34@sha256:e77945a0a67d44e386489656bbe72029630b7c3dc2e0d597000b336b6357d495'
            cache_key_suffix: 'rhel8-2.14'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.13.10-47@sha256:f1d2b310393ba3e6a43c3c015491f94d1a58434292786d71f8e07a6d4fa85380'
            cache_key_suffix: 'rhel8-2.13'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'

          #
          # UBI 9
          #

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.18.9-3@sha256:1a60cff224d54f0155950a7df7492648ee67dbda4c2da8938b48ed8a6b860952'
            cache_key_suffix: 'rhel9-2.18'
            # renovate yaml: datasource=pypi
            molecule: '25.9.0'
            additional_packages:
              - 'python-unversioned-command'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.17.14-4@sha256:4d64d06d51a54f5e00165be561ec05e06786577a7a5e1e6e52eabe4531fab698'
            cache_key_suffix: 'rhel9-2.17'
            # renovate yaml: datasource=pypi
            molecule: '25.9.0'
            additional_packages:
              - 'python-unversioned-command'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.16.14-27@sha256:b7838e9a1012e80ff708859a5518701b676becfcac4dce70da72bd500cd53860'
            cache_key_suffix: 'rhel9-2.16'
            # renovate yaml: datasource=pypi
            molecule: '25.9.0'
            additional_packages:
              - 'python-unversioned-command'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.15.13-27@sha256:52226b0b1caa81a1060e139e4a51997485c4e1fa825f55303a7c2bda4e15e1a2'
            cache_key_suffix: 'rhel9-2.15'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'
            additional_packages:
              - 'python-unversioned-command'

    steps:
      - name: 'Install NodeJS'
        uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020' # v4.4.0
        with:
          # renovate dep: datasource=npm depName=node
          node-version: '20.19.5'

      - name: 'Install podman'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          microdnf install podman -y

      - name: 'Checkout repository'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8' # v5.0.0
        with:
          # check out the pull request's HEAD
          ref: '${{ github.event.pull_request.head.sha }}'

      - name: 'Download cache of the previous workflow run'
        uses: 'dawidd6/action-download-artifact@ac66b43f0e6a346234dd65d4d0c8fbb31cb316e5' # v11
        if: >-
          github.event.inputs.repoCache != 'disabled' &&
          github.event.inputs.repoCache != 'reset'
        id: 'artifact-download'
        with:
          name: '${{ env.cache_key }}-${{ matrix.container.cache_key_suffix }}'
          path: 'cache-download'
          if_no_artifact_found: 'ignore'

      - name: 'Extract molecule cache to improve performance'
        if: >-
          github.event.inputs.repoCache != 'disabled' &&
          github.event.inputs.repoCache != 'reset' &&
          steps.artifact-download.outputs.found_artifact == 'true'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          # Make sure the directory exists, and extract it there. Note that it's nested in the download directory.
          mkdir -p "${{ env.cache_dir }}"
          tar -xzf "cache-download/${{ env.cache_archive }}" -C "${{ env.cache_dir }}"

      - name: 'Install additional packages'
        if: "join(matrix.container.additional_packages, ' ') != ''"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          microdnf install -y ${{ join(matrix.container.additional_packages, ' ') }}

      - name: 'Install Python packages'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          pip3 install molecule==${{ matrix.container.molecule }}
          mkdir -pv "${{ env.cache_dir }}"

      - name: 'Run molecule'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          # check if any debug options are enabled
          (
            [[ "${{ github.event.inputs.moleculeDebug }}" == "" ]] ||
            [[ "${{ github.event.inputs.moleculeDebug }}" != "true" ]]
          ) || {
            export MOLECULE_DEBUG=1;
          };

          (
            [[ "${{ github.event.inputs.ansibleVerbosity }}" == "" ]] ||
            [[ "${{ github.event.inputs.ansibleVerbosity }}" -eq 0 ]]
          ) || {
            export ANSIBLE_VERBOSITY="${{ github.event.inputs.ansibleVerbosity }}";
          };
          molecule test

      - name: 'Scan molecule cache directory to ensure it contains no secrets prior to uploading'
        if: "github.event.inputs.repoCache != 'disabled'"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          podman run -v "${{ env.cache_dir }}:/scan" "${{ env.gitleaks-image }}" detect --source "/scan" --no-git || {
            echo "ERROR: Secret found, failing workflow";
            exit 1;
          };

      - name: 'Compress molecule cache to improve performance'
        if: "github.event.inputs.repoCache != 'disabled'"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          # The -C is important, as otherwise we end up extracting the files with
          # their full path, ultimately leading to a nested directory situation.
          tar -czf "${{ env.cache_archive }}" -C "${{ env.cache_dir }}" .

      - name: 'Upload compressed cache'
        uses: 'actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02' # v4.6.2
        if: "github.event.inputs.repoCache != 'disabled'"
        with:
          name: '${{ env.cache_key }}-${{ matrix.container.cache_key_suffix }}'
          path: '${{ env.cache_archive }}'
          # Since this is updated and restored on every run, we don't need to keep it
          # for long. Just make sure this value is large enough that multiple molecule
          # runs can happen before older cache archives are deleted.
          retention-days: 3
...
