---
name: 'molecule community EEs'
on:  # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - 'main'

    paths:
      - '.github/workflows/molecule_community_ees.yml'
      - 'defaults/**'
      - 'files/**'
      - 'handlers/**'
      - 'library/**'
      - 'lookup_plugins/**'
      - 'meta/**'
      - 'module_utils/**'
      - 'molecule/**'
      - 'tasks/**'
      - 'templates/**'
      - 'vars/**'

  push:
    branches:
      - 'main'

    paths:
      - '.github/workflows/molecule_community_ees.yml'
      - 'defaults/**'
      - 'files/**'
      - 'handlers/**'
      - 'library/**'
      - 'lookup_plugins/**'
      - 'meta/**'
      - 'module_utils/**'
      - 'molecule/**'
      - 'tasks/**'
      - 'templates/**'
      - 'vars/**'

  workflow_dispatch:
    inputs:
      moleculeDebug:
        description: 'Enable Molecule debug?'
        type: 'choice'
        default: 'false'
        options:
          - 'true'
          - 'false'

      ansibleVerbosity:
        description: 'Enable Ansible verbosity?'
        type: 'choice'
        default: '0'
        options:
          - '0'
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'

permissions:
  contents: 'read'

jobs:
  molecule-community-ees:
    runs-on: 'ubuntu-22.04'
    permissions:
      contents: 'read'
    container:
      # yamllint disable-line rule:line-length
      image: '${{ matrix.container.image }}'
      credentials:
        username: '${{ github.actor }}'
        password: '${{ secrets.GITHUB_TOKEN }}'
      options: '--user root --privileged'
    strategy:
      matrix:
        container:
          #
          # Ansible Dev Tools container
          #

          # yamllint disable-line rule:line-length
          - image: 'ghcr.io/ansible/community-ansible-dev-tools:v24.7.2@sha256:7aaf033058a9f5f417fe204e3d23b5166b1cbc0e4a415cb5206feb2c5279e52a'
            molecule: '24.7.0'

          #
          # Ansible community execution environments
          #

          # yamllint disable-line rule:line-length
          - image: 'ghcr.io/ansible-community/community-ee-base:2.17.2-1@sha256:1e1fb9c3bfa3f2501ff6d38bedcc2fd4f8d9890cb4ab9571ff70a79a46da1bd7'
            # renovate yaml: datasource=pypi
            molecule: '24.7.0'
            configure_podman: true
            additional_packages:
              - 'podman'
              - 'fuse-overlayfs'

          # yamllint disable-line rule:line-length
          - image: 'ghcr.io/ansible-community/community-ee-base:2.16.6-1@sha256:742e6eb0ffde84f8a1c916a5eae217da317b4a4705a7636c70696bcd7f6a8cdd'
            # renovate yaml: datasource=pypi
            molecule: '24.7.0'
            configure_podman: true
            additional_packages:
              - 'podman'
              - 'fuse-overlayfs'

    steps:
      - name: 'Install NodeJS'
        uses: 'actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b' # v4.0.3
        with:
          # renovate dep: datasource=npm depName=node
          node-version: '20.16.0'

      - name: 'Checkout repository'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # v4.1.7

      - name: 'Install molecule'
        if: "join(matrix.container.molecule, ' ') != ''"
        run: |
          pip3 install molecule==${{ matrix.container.molecule }}

      - name: 'Install additional packages'
        if: "join(matrix.container.additional_packages, ' ') != ''"
        run: |
          if command dnf 2>&1 > /dev/null; then
            dnf install -y ${{ join(matrix.container.additional_packages, ' ') }}
          elif command microdnf 2>&1 > /dev/null; then
            microdnf install -y ${{ join(matrix.container.additional_packages, ' ') }}
          else
            echo "ERROR: Neither dnf nor microdnf found!"
            exit 1
          fi

      - name: 'Configure podman'
        if: 'matrix.container.configure_podman'
        run: |
          # install shadow utils
          dnf -y install shadow-utils
          rpm --setcaps shadow-utils 2>/dev/null

          # create configuration directory for the podman configuration files
          mkdir -p /root/.config/containers

          # download default configurations
          repoUrl="https://raw.githubusercontent.com/containers/image_build/main/podman"
          curl "${repoUrl}/containers.conf" -o "/etc/containers/containers.conf"
          curl "${repoUrl}/podman-containers.conf" -o "/root/.config/containers/containers.conf"


          # below replacements ensure that podman works with fuse-overlay storage inside a container
          sed -e 's|^#mount_program|mount_program|g' \
              -e '/additionalimage.*/a "/var/lib/shared",' \
              -e 's|^mountopt[[:space:]]*=.*$|mountopt = "nodev,fsync=0"|g' \
              "/usr/share/containers/storage.conf" \
              > "/etc/containers/storage.conf"

          # ensure required files and directories exist
          mkdir -p /var/lib/shared/overlay-images \
                /var/lib/shared/overlay-layers \
                /var/lib/shared/vfs-images \
                /var/lib/shared/vfs-layers && \
                touch /var/lib/shared/overlay-images/images.lock && \
                touch /var/lib/shared/overlay-layers/layers.lock && \
                touch /var/lib/shared/vfs-images/images.lock && \
                touch /var/lib/shared/vfs-layers/layers.lock

      - name: 'Run molecule'
        run: |
          # check if any debug options are enabled
          (
            [[ "${{ github.event.inputs.moleculeDebug }}" == "" ]] ||
            [[ "${{ github.event.inputs.moleculeDebug }}" != "true" ]]
          ) || {
            export MOLECULE_DEBUG=1;
          };

          export ANSIBLE_VERBOSITY=0
          (
            [[ "${{ github.event.inputs.ansibleVerbosity }}" == "" ]] ||
            [[ "${{ github.event.inputs.ansibleVerbosity }}" -gt 0 ]]
          ) || {
            export ANSIBLE_VERBOSITY="${{ github.event.inputs.ansibleVerbosity }}";
          };

          molecule test
...
