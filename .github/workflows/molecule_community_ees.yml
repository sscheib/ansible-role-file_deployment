---
name: 'molecule community EEs'
on:  # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - 'main'

    paths:
      - '.github/workflows/molecule_community_ees.yml'
      - 'defaults/**'
      - 'files/**'
      - 'handlers/**'
      - 'library/**'
      - 'lookup_plugins/**'
      - 'meta/**'
      - 'module_utils/**'
      - 'molecule/**'
      - 'tasks/**'
      - 'templates/**'
      - 'vars/**'

  push:
    branches:
      - 'main'

    paths:
      - '.github/workflows/molecule_community_ees.yml'
      - 'defaults/**'
      - 'files/**'
      - 'handlers/**'
      - 'library/**'
      - 'lookup_plugins/**'
      - 'meta/**'
      - 'module_utils/**'
      - 'molecule/**'
      - 'tasks/**'
      - 'templates/**'
      - 'vars/**'

  workflow_dispatch:
    inputs:
      moleculeDebug:
        description: 'Enable Molecule debug?'
        type: 'choice'
        default: 'false'
        options:
          - 'true'
          - 'false'

      ansibleVerbosity:
        description: 'Enable Ansible verbosity?'
        type: 'choice'
        default: '0'
        options:
          - '0'
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'

permissions:
  contents: 'read'

jobs:
  molecule-community-ees:
    runs-on: 'ubuntu-24.04'
    permissions:
      contents: 'read'
    container:
      image: '${{ matrix.container.image }}'
      credentials:
        username: '${{ github.actor }}'
        password: '${{ secrets.GITHUB_TOKEN }}'
      options: '--user root --privileged'
    strategy:
      matrix:
        container:
          #
          # Ansible Dev Tools container
          #

          # yamllint disable-line rule:line-length
          - image: 'ghcr.io/ansible/community-ansible-dev-tools:v24.11.0@sha256:4e20a3c4880306415c573c31b750d21878488f6b44a82a0991faeb35fa0b4c11'
            molecule: '24.7.0'

          #
          # Ansible community execution environments
          #

          # yamllint disable-line rule:line-length
          - image: 'ghcr.io/ansible-community/community-ee-base:2.18.1-1@sha256:f2792d48a9b902f1fcc698a2c25acfa027b04cf22af90e2a06db3e37d8626a8c'
            # renovate yaml: datasource=pypi
            molecule: '24.9.0'
            configure_podman: true
            additional_packages:
              - 'podman'
              - 'fuse-overlayfs'

          # yamllint disable-line rule:line-length
          - image: 'ghcr.io/ansible-community/community-ee-base:2.17.6-1@sha256:102622081da26c2e7fc79b465ffe15ce30f676a9a281a2dc921ee27c83ddfa37'
            # renovate yaml: datasource=pypi
            molecule: '24.9.0'
            configure_podman: true
            additional_packages:
              - 'podman'
              - 'fuse-overlayfs'

          # yamllint disable-line rule:line-length
          - image: 'ghcr.io/ansible-community/community-ee-base:2.16.7-1@sha256:754c578dc8f40e610ed69b4cb2993a5f59c1dcdbee4a80e91a2bad2516ba7a72'
            # renovate yaml: datasource=pypi
            molecule: '24.9.0'
            configure_podman: true
            additional_packages:
              - 'podman'
              - 'fuse-overlayfs'

    steps:
      - name: 'Install NodeJS'
        uses: 'actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af' # v4.1.0
        with:
          # renovate dep: datasource=npm depName=node
          node-version: '20.18.1'

      - name: 'Checkout repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # v4.2.2

      - name: 'Install molecule'
        if: "join(matrix.container.molecule, ' ') != ''"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          pip3 install molecule==${{ matrix.container.molecule }}

      - name: 'Install additional packages'
        if: "join(matrix.container.additional_packages, ' ') != ''"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          if command -v dnf 2>&1 > /dev/null; then
            dnf install -y ${{ join(matrix.container.additional_packages, ' ') }}
          elif command -v microdnf 2>&1 > /dev/null; then
            microdnf install -y ${{ join(matrix.container.additional_packages, ' ') }}
          else
            echo "ERROR: Neither dnf nor microdnf found!"
            exit 1
          fi

      - name: 'Configure podman'
        if: 'matrix.container.configure_podman'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          # install shadow utils
          dnf -y install shadow-utils
          rpm --setcaps shadow-utils 2>/dev/null

          # create configuration directory for the podman configuration files
          mkdir -p /root/.config/containers

          # download default configurations
          repoUrl="https://raw.githubusercontent.com/containers/image_build/main/podman"
          curl "${repoUrl}/containers.conf" -o "/etc/containers/containers.conf"
          curl "${repoUrl}/podman-containers.conf" -o "/root/.config/containers/containers.conf"


          # below replacements ensure that podman works with fuse-overlay storage inside a container
          sed -e 's|^#mount_program|mount_program|g' \
              -e '/additionalimage.*/a "/var/lib/shared",' \
              -e 's|^mountopt[[:space:]]*=.*$|mountopt = "nodev,fsync=0"|g' \
              "/usr/share/containers/storage.conf" \
              > "/etc/containers/storage.conf"

          # ensure required files and directories exist
          mkdir -p /var/lib/shared/overlay-images \
                /var/lib/shared/overlay-layers \
                /var/lib/shared/vfs-images \
                /var/lib/shared/vfs-layers && \
                touch /var/lib/shared/overlay-images/images.lock && \
                touch /var/lib/shared/overlay-layers/layers.lock && \
                touch /var/lib/shared/vfs-images/images.lock && \
                touch /var/lib/shared/vfs-layers/layers.lock

      - name: 'Run molecule'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          # check if any debug options are enabled
          (
            [[ "${{ github.event.inputs.moleculeDebug }}" == "" ]] ||
            [[ "${{ github.event.inputs.moleculeDebug }}" != "true" ]]
          ) || {
            export MOLECULE_DEBUG=1;
          };

          (
            [[ "${{ github.event.inputs.ansibleVerbosity }}" == "" ]] ||
            [[ "${{ github.event.inputs.ansibleVerbosity }}" -eq 0 ]]
          ) || {
            export ANSIBLE_VERBOSITY="${{ github.event.inputs.ansibleVerbosity }}";
          };

          molecule test
...
