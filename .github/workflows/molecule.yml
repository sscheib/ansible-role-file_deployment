---
name: 'molecule'
on:  # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - 'main'
    paths:
      - '**'
      - '!.github/'
      - '.github/workflows/molecule.yml'

  push:
    branches:
      - 'main'
    paths:
      - '**'
      - '!.github/'
      - '.github/workflows/molecule.yml'

  workflow_dispatch:
    inputs:
      repoCache:
        description: 'Reset or disable the cache?'
        type: 'choice'
        default: 'enabled'
        options:
          - 'enabled'
          - 'disabled'
          - 'reset'

permissions:
  contents: 'read'

# Adding these as env variables makes it easy to re-use them in different steps and in bash.
env:
  cache_archive: 'molecule_cache.tar.gz'
  # This is the dir renovate provides
  # If we set our own directory via cacheDir, we can run into permissions issues.
  # It is also possible to cache a higher level of the directory, but it has minimal benefit. While renovate execution
  # time gets faster, it also takes longer to upload the cache as it grows bigger.
  cache_dir: '/tmp/.cache/molecule'
  # This can be manually changed to bust the cache if neccessary.
  cache_key: 'molecule-cache'

jobs:
  changes:
    runs-on: 'ubuntu-latest'
    outputs:
      src: '${{ steps.changes.outputs.src }}'

    steps:
      - name: 'Harden Runner'
        uses: 'step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6' # v2.8.1
        with:
          egress-policy: 'block'
          allowed-endpoints: >
            api.github.com:443
            github.com:443

      - name: 'Checkout repository'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # v4.1.7

      - name: 'Check if molecule should run'
        uses: 'dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36' # v3.0.2
        id: 'changes'
        with:
          filters: |
            src:
              - '**'
              - '!.github/**'
              - '!.github/**/**'
              - '.github/workflows/molecule.yml'

  check-user-permissions:
    runs-on: 'ubuntu-latest'
    needs: 'changes'
    if: "needs.changes.outputs.src == 'true'"
    outputs:
      require-result: '${{ steps.check-access.outputs.require-result }}'
    steps:
      - name: 'Harden Runner'
        uses: 'step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6' # v2.8.1
        with:
          egress-policy: 'block'
          allowed-endpoints: >
            api.github.com:443
            github.com:443

      - name: 'Get User Permissions'
        id: 'check-access'
        uses: 'actions-cool/check-user-permission@956b2e73cdfe3bcb819bb7225e490cb3b18fd76e' # v2.2.1
        with:
          require: 'write'
          username: '${{ github.triggering_actor }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'Check User Permission'
        if: "steps.check-access.outputs.require-result == 'false'"
        run: |
          echo "${{ github.triggering_actor }} does not have permissions on this repo."
          echo "Current permission level is ${{ steps.check-access.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"
          exit 1

  molecule:
    runs-on: 'ubuntu-latest'
    needs: 'check-user-permissions'
    if: "needs.check-user-permissions.outputs.require-result == 'true'"
    permissions:
      contents: 'write'
    container:
      image: '${{ matrix.container.image }}'
      credentials:
        username: '${{ secrets.crc_username }}'
        password: '${{ secrets.crc_password }}'
      options: '--privileged'
    strategy:
      matrix:
        container:
          #
          # UBI 8
          #

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.17@sha256:c2904238711e767ca281562f04d45317555d6d36edc5e8b040858f4c71bb5fd5'
            cache_key_suffix: 'rhel8-2.17'
            # renovate yaml: datasource=pypi
            molecule: '24.7.0'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16@sha256:1620eca31fb219945d34511d50c74d2843bcd09a6a098468e8f6b0ad50194e96'
            cache_key_suffix: 'rhel8-2.16'
            # renovate yaml: datasource=pypi
            molecule: '24.7.0'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.15@sha256:cd98cacf3f603a5693184f4747e202ab344e6dbd20cf7288dfec5b4127aebb5a'
            cache_key_suffix: 'rhel8-2.15'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.14@sha256:ce4992fc1257269b3446dc3592de958e9b4fae277a3a0306907ec72b727c3d87'
            cache_key_suffix: 'rhel8-2.14'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.13@sha256:92718f81f10d9042eaeb5a13cb236d02c83756f38ace55e8324cf8a8687916b8'
            cache_key_suffix: 'rhel8-2.13'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'

          #
          # UBI 9
          #

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.17@sha256:a319684cce1974ec94b70cb00af4af8336b7df4ee991f385c8c4f6f4a581e231'
            cache_key_suffix: 'rhel9-2.17'
            # renovate yaml: datasource=pypi
            molecule: '24.7.0'
            additional_packages:
              - 'python-unversioned-command'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.16@sha256:9a6cdd961fb0b2b674fadeb2ee6095cfb6c141b1f1c1a8e077950544dd5de967'
            cache_key_suffix: 'rhel9-2.16'
            # renovate yaml: datasource=pypi
            molecule: '24.7.0'
            additional_packages:
              - 'python-unversioned-command'

          # yamllint disable-line rule:line-length
          - image: 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.15@sha256:59daa6e5c3b87e4a571804d5c89f5455c9fd27fa82cb514eb55f09b158bd419c'
            cache_key_suffix: 'rhel9-2.15'
            # renovate yaml: datasource=pypi
            molecule: '6.0.3'
            additional_packages:
              - 'python-unversioned-command'

    steps:
      - name: 'Install NodeJS and podman'
        run: 'microdnf install nodejs podman -y'

      - name: 'Checkout repository'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # v4.1.7
        with:
          # check out the pull request's HEAD
          ref: '${{ github.event.pull_request.head.sha }}'

      - name: 'Download cache of the previous workflow run'
        uses: 'dawidd6/action-download-artifact@bf251b5aa9c2f7eeb574a96ee720e24f801b7c11' # v6
        if: "github.event.inputs.repoCache != 'disabled'"
        continue-on-error: true
        with:
          name: '${{ env.cache_key }}-${{ matrix.container.cache_key_suffix }}'
          path: 'cache-download'

      - name: 'Extract molecule cache to improve performance'
        if: "github.event.inputs.repoCache != 'disabled'"
        run: |
          set -x
          # Skip if no cache is set, such as the first time it runs.
          if [ ! -d cache-download ] ; then
            echo "No cache found."
            exit 0
          fi

          # Make sure the directory exists, and extract it there. Note that it's nested in the download directory.
          mkdir -p "${cache_dir}"
          tar -xzf "cache-download/${cache_archive}" -C "${cache_dir}"

      - name: 'Install additional packages'
        if: "join(matrix.container.additional_packages, ' ') != ''"
        run: |
          microdnf install -y ${{ join(matrix.container.additional_packages, ' ') }}

      - name: 'Install Python packages'
        run: |
          pip3 install molecule==${{ matrix.container.molecule }}
          mkdir -pv "${cache_dir}"

      - name: 'Run molecule'
        run: |
          molecule test

      - name: 'Compress molecule cache to improve performance'
        if: "github.event.inputs.repoCache != 'disabled'"
        run: |
          # The -C is important, as otherwise we end up extracting the files with
          # their full path, ultimately leading to a nested directory situation.
          tar -czf "${cache_archive}" -C "${cache_dir}" .

      - name: 'Upload compressed cache'
        uses: 'actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b' # v4.3.4
        if: "github.event.inputs.repoCache != 'disabled'"
        with:
          name: '${{ env.cache_key }}-${{ matrix.container.cache_key_suffix }}'
          path: '${{ env.cache_archive }}'
          # Since this is updated and restored on every run, we don't need to keep it
          # for long. Just make sure this value is large enough that multiple renovate
          # runs can happen before older cache archives are deleted.
          retention-days: 1
...
