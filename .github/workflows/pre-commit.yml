---
name: 'pre-commit'
on:  # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - 'main'

  push:
    branches:
      - 'main'

  workflow_dispatch:
    inputs:
      repoCache:
        description: 'Reset or disable the cache?'
        type: 'choice'
        default: 'enabled'
        options:
          - 'enabled'
          - 'disabled'
          - 'reset'

  # purge cache every Sunday at 0:00
  schedule:
    - cron: '0 0 * * 0'

permissions:
  contents: 'read'

# Adding these as env variables makes it easy to re-use them in different steps and in bash.
env:
  cache_archive: 'pre-commit_cache.tar.gz'
  # This is the dir renovate provides
  # If we set our own directory via cacheDir, we can run into permissions issues.
  # It is also possible to cache a higher level of the directory, but it has minimal benefit. While renovate execution
  # time gets faster, it also takes longer to upload the cache as it grows bigger.
  cache_dir: '/tmp/.cache/pre-commit'
  # This can be manually changed to bust the cache if neccessary.
  cache_key: 'pre-commit-cache'
  # File that contains the pre-commit hooks to skip
  hook_skip_file: './.github/.pre-commit-skip-hooks'

jobs:
  pre-commit:
    permissions:
      contents: 'write'
    runs-on: 'ubuntu-22.04'
    steps:
      - name: 'Harden Runner'
        uses: 'step-security/harden-runner@5c7944e73c4c2a096b17a9cb74d65b6c2bbafbde' # v2.9.1
        with:
          egress-policy: 'audit'

      - name: 'Checkout repository'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # v4.1.7

      - name: 'Download cache of the previous workflow run'
        uses: 'dawidd6/action-download-artifact@bf251b5aa9c2f7eeb574a96ee720e24f801b7c11' # v6
        if: >-
          github.event.inputs.repoCache != 'disabled' &&
          github.event.inputs.repoCache != 'reset' &&
          github.event_name != 'schedule'
        id: 'artifact-download'
        with:
          name: '${{ env.cache_key }}'
          path: 'cache-download'
          if_no_artifact_found: 'ignore'

      - name: 'Extract pre-commit cache to improve performance'
        if: >-
          github.event.inputs.repoCache != 'disabled' &&
          github.event.inputs.repoCache != 'reset' &&
          github.event_name != 'schedule' &&
          steps.artifact-download.outputs.found_artifact == 'true'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          # Make sure the directory exists, and extract it there. Note that it's nested in the download directory.
          mkdir -p "${cache_dir}"
          tar -xzf "cache-download/${cache_archive}" -C "${cache_dir}"

      - name: 'Install Python'
        uses: 'actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3' # v5.2.0
        with:
          # renovate dep: datasource=python-version versioning=python depName=python
          python-version: '3.12.5'

      - name: 'Install pre-commit'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          # renovate: datasource=pypi
          pip3 install pre-commit==3.8.0
          mkdir -pv "${cache_dir}"

      - name: 'Run pre-commit'
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          export PRE_COMMIT_HOME="${cache_dir}"
          if [[ -f "${hook_skip_file}" ]]; then
            export SKIP="$(tr '\n' ',' < "${hook_skip_file}")"
          fi
          pre-commit run --verbose --all-files --show-diff-on-failure

      - name: 'Compress pre-commit cache to improve performance'
        if: "github.event.inputs.repoCache != 'disabled'"
        shell: 'bash'
        run: |
          # fail if:
          # - a variable is unbound
          # - any command fails
          # - a command in a pipe fails
          # - a command in a sub-shell fails
          set -Eeuo pipefail

          # enable debug if runner runs in debug
          [[ "${{ runner.debug }}" -ne 1 ]] || {
            echo "INFO: Enabling bash trace";
            set -x;
          };

          # The -C is important, as otherwise we end up extracting the files with
          # their full path, ultimately leading to a nested directory situation.
          tar -czf "${cache_archive}" -C "${cache_dir}" .

      - name: 'Upload compressed cache'
        uses: 'actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874' # v4.4.0
        if: "github.event.inputs.repoCache != 'disabled'"
        with:
          name: '${{ env.cache_key }}'
          path: '${{ env.cache_archive }}'
          # Since this is updated and restored on every run, we don't need to keep it
          # for long. Just make sure this value is large enough that multiple renovate
          # runs can happen before older cache archives are deleted.
          retention-days: 1
...
