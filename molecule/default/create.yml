---
- name: 'Create test instances'
  hosts: 'localhost'
  gather_facts: false
  tasks:

    - name: 'Filter out platforms that are not compatible with the Ansible Core version being used'
      ansible.builtin.set_fact:
        molecule_yml: >-
          {{
            molecule_yml | ansible.builtin.combine(
              {
                'platforms':
                  (
                    molecule_yml.platforms |
                    selectattr('skip_versions', 'defined') |
                    length > 0
                  ) | ansible.builtin.ternary(
                    molecule_yml.platforms |
                    selectattr('skip_versions', 'defined') |
                    rejectattr('skip_versions', 'contains', ansible_version.major ~ '.' ~ ansible_version.minor)
                    +
                    molecule_yml.platforms |
                    selectattr('skip_versions', 'undefined'),
                    molecule_yml.platforms
                  )
              },
              list_merge='replace'
            )
          }}

    - name: 'Block: Handle container creation'
      block:

        - name: 'Create a container'
          containers.podman.podman_container:
            name: '{{ __t_container.name }}'
            image: '{{ __t_container.image }}'
            privileged: '{{ __t_container.privileged | default(omit) }}'
            volumes: '{{ __t_container.volumes | default(omit) }}'
            capabilities: '{{ __t_container.capabilities | default(omit) }}'
            systemd: '{{ __t_container.systemd | default(omit) }}'
            state: 'started'
            command: "{{ __t_container.command | default('sleep 1d') }}"
            log_driver: 'json-file'
            label:
              molecule_instance: true
          register: '__t_container_create_result'
          loop: '{{ molecule_yml.platforms }}'
          loop_control:
            loop_var: '__t_container'
            label: '{{ __t_container.name }}'

        - name: 'Ensure all containers were created successfully'
          ansible.builtin.assert:
            that:
              - >-
                __t_container_create_result.results |
                rejectattr('container.State.ExitCode', '==', 0) |
                length == 0

              - >-
                __t_container_create_result.results |
                rejectattr('container.State.Running', '==', true) |
                length == 0
            success_msg: 'All containers created successfully'
            fail_msg: 'One or more containers failed creation'

      rescue:

        - name: 'Retrieve container log of failed containers'
          ansible.builtin.command:
            cmd: 'podman logs {{ __t_failed_container.__t_container.name }}'
          changed_when: false
          register: '__t_failed_containers'
          loop: >-
            {{
              __t_container_create_result.results |
              selectattr('container', 'defined') |
              rejectattr('container.State.ExitCode', '==', 0) |
              rejectattr('container.State.Running', '==', true)
              +
              __t_container_create_result.results |
              selectattr('container', 'undefined')
            }}
          loop_control:
            loop_var: '__t_failed_container'
            label: '{{ __t_failed_container.__t_container.name }}'

        - name: 'Show the logs of the containers that failed to create'
          ansible.builtin.debug:
            msg: >-
              {{
                __t_failed_container.__t_container.name ~
                ' stderr: ' ~
                __t_failed_container.stderr ~
                ' - podman logs: ' ~
                __t_failed_container.msg
              }}
          loop: >-
            {{
              __t_container_create_result.results |
              selectattr('container', 'defined') |
              rejectattr('container.State.ExitCode', '==', 0) |
              rejectattr('container.State.Running', '==', true)
              +
              __t_container_create_result.results |
              selectattr('container', 'undefined')
            }}
          loop_control:
            loop_var: '__t_failed_container'
            label: '{{ __t_failed_container.__t_container.name }}'

        - name: 'Fail if one or more containers failed to create'
          ansible.builtin.fail:
            msg: 'One or more containers failed to create'
          when: >-
            __t_container_create_result.results |
            selectattr('container', 'defined') |
            rejectattr('container.State.ExitCode', '==', 0) |
            rejectattr('container.State.Running', '==', true) |
            length > 0
            or
            __t_container_create_result.results |
            selectattr('container', 'undefined') |
            length > 0

    - name: 'Add container to molecule_inventory'
      ansible.builtin.set_fact:
        __t_molecule_inventory: >-
          {{
            __t_molecule_inventory | default({}) |
            ansible.builtin.combine(
              {
                'molecule': {
                  'hosts': {
                    __t_platform.name: {}
                  }
                }
              },
              recursive=true
            )
          }}
      loop: '{{ molecule_yml.platforms }}'
      loop_control:
        loop_var: '__t_platform'
        label: '{{ __t_platform.name }}'

    - name: 'Dump molecule_inventory to emphemeral directory: {{ molecule_ephemeral_directory }}'
      ansible.builtin.copy:
        content: |
          {{ __t_molecule_inventory | to_yaml }}
        dest: '{{ molecule_ephemeral_directory }}/inventory/molecule_inventory.yml'
        mode: '0600'

    - name: 'Force inventory refresh'
      ansible.builtin.meta: 'refresh_inventory'

    - name: 'Fail if molecule group is missing'
      ansible.builtin.assert:
        that: "'molecule' in groups"
        fail_msg: 'The molecule group was not found inside inventory groups: {{ groups }}'
      run_once: true
...
